using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using SharpScope;
using System.Threading;
using System.IO;

namespace SharpScope
{
    ///<summary>This class contains all neccesary functions used to process ADS-B data.</summary>
    ///
    class ADSB
    {
        //For parsing
        static string msgType = "";
        static string msgSubt = "";
        static string sessionID = "";
        static string aircraftID = "";
        public static string icaoHex = "";
        static string flightID = "";
        static string dateGenerated = "";
        static string timeGenerated = "";
        static string dateLogged = "";
        static string timeLogged = "";
        static string callsign = "";
        static string altitude = "";
        static string groundSpeed = "";
        static string track = "";
        static string latitude = "";
        static string longitude = "";
        static string verticalSpeed = "";
        static string sqwawkCode = "";
        static string alertFlag = "";
        static string emergencyFlag = "";
        static string identFlag = "";
        static string onGround = "";

        static TcpClient tcpListener;
        static Stream inputStream;

        public static Aircraft[] aircraftList = new Aircraft[16777215]; //The hard limit for aircraft is determined by the ICAO code, so the number of aircraft that could possibly exist with mode S codes is the actual limit.
        ///<summary>Creates a TCP connection to an ADS-B data source</summary>
        ///
        public static bool Connect()
        {
            try
            {
                tcpListener = new TcpClient();
                Console.WriteLine("Connecting...");
                Console.WriteLine("Target- IP: " + Program.serverIP + " PORT: " + Program.serverPort);
                tcpListener.Connect(Program.serverIP, Program.serverPort);
                Console.WriteLine("Connection Acquired.");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error: " + e.Message);
                return false;
            }
            return true;
        }

        ///<summary>Gets a single input line (message) from the ADS-B data source</summary>
        ///
        public static string GetInputLine()
        {
            inputStream = tcpListener.GetStream();
            Thread.Sleep(1000);
            StreamReader reader = new StreamReader(inputStream);
            String input = reader.ReadLine();
            return input;
        }

        ///<summary>Parses ADS-B messages, manages aircraft objects and adds to array</summary>
        ///

        public static void ProcessMessage(string rawMessage)
        {
            /*There are a few message headers that we care about:
             * MSG* = Regular message generated by aircraft
             * ID = An aircraft being tracked changes its callsign
             * AIR = New aircraft is being tracked
             * STA* = Aircraft tracking status changes
             * *= Contains subtypes
             * 
             * ----------------------------------------------------
             * MSG Subtypes:
             * MSG,1 = Callsign (Only place to get callsign)
             * MSG,2 = Surface position message (only triggered on ground) [We don't really care about on ground AC for this]
             * MSG,3 = Airborne position
             * MSG,4 = Airborne Velocity (Only place to get vertical speed)
             * MSG,5 = Surveillance altitude message (Triggered by RADAR and only output if AC has sent MSG 1,2,3,4,8 previously)
             * MSG,6 = Surveillance ID message (Same conditions as MSG5 and only place to get sqwawk code)
             * MSG,7 = Air to air message (Triggered by TCAS)
             * MSG,8 = All call reply (Triggered by RADAR and broadcast. I think it's a sort of 'keep alive' signal...)
             * -----------------------------------------------------
             * STA Subtypes: (Found in field 11)
             * PL = Position lost (CST) (vSTARS will coast a target if the track is owned and returns no data for 30 seconds.)
             * (We can just stop sending data and it should coast)
             * SL = Signal lost (CST)
             * RM = Remove (Stop displaying the aircraft [CST])
             * AD = Delete (Delete the aircraft from the list)
             * OK = OK (Reset time-out if aircraft returns into cover)
             * -----------------------------------------------------
             * More info, including formatting:
             * http://woodair.net/SBS/Article/Barebones42_Socket_Data.htm
            */
            ClearVars(); //Clears out the variables before writing to them.

            Char[] messageChars = rawMessage.ToCharArray();

            int counter = 0;

            foreach (char a in messageChars)
            {
                //The program will step through each individual character and separate into the correct parts.
                if(a != ',')
                {
                    AddToString(counter, a); //Add char a to the proper string
                }
                else
                {
                    //If we're here, it's because a ',' came up, meaning that we're done with the section we were on.
                    counter++; //Just up the counter one and leave
                }
                //Exit once all chars have been parsed
            }

            //Insert hacks here
            string intermediate = icaoHex;
            icaoHex = "0x";
            icaoHex += intermediate;

            //Next, we'll look at the header to see what we need to do...

            switch (msgType)
            {
                case "MSG": //Regular Message
                    switch (Convert.ToInt32(msgSubt))
                    {
                        case 1:
                            //Callsign
                            int index1 = Convert.ToInt32(icaoHex, 16);
                            if(aircraftList[index1] == null)
                            {
                                aircraftList[index1] = new Aircraft();
                            }

                            aircraftList[index1].icaoID = icaoHex; //Double check ICAO ID
                            aircraftList[index1].callsign = callsign;
                            break;
                        case 2:
                            //Surface position- ignore
                            break;
                        case 3:
                            //Airborne position
                            int index3 = Convert.ToInt32(icaoHex, 16);
                            if (aircraftList[index3] == null)
                            {
                                aircraftList[index3] = new Aircraft();
                            }

                            aircraftList[index3].icaoID = icaoHex;
                            aircraftList[index3].altitude = Convert.ToInt32(altitude);
                            aircraftList[index3].latitude = Convert.ToDouble(latitude);
                            aircraftList[index3].longitude = Convert.ToDouble(longitude);
                            if(alertFlag == "1")
                            {
                                aircraftList[index3].alertFlag = true;
                            }
                            else
                            {
                                aircraftList[index3].alertFlag = false;
                            }
                            if (emergencyFlag == "1")
                            {
                                aircraftList[index3].emergencyFlag = true;
                            }
                            else
                            {
                                aircraftList[index3].emergencyFlag = false;
                            }
                            if (identFlag == "1")
                            {
                                aircraftList[index3].identFlag = true;
                            }
                            else
                            {
                                aircraftList[index3].identFlag = false;
                            }
                            break;
                        case 4:
                            //Airborne velocity
                            int index4 = Convert.ToInt32(icaoHex, 16);
                            if (aircraftList[index4] == null)
                            {
                                aircraftList[index4] = new Aircraft();
                            }

                            aircraftList[index4].icaoID = icaoHex;
                            aircraftList[index4].groundSpeed = Convert.ToDouble(groundSpeed);
                            aircraftList[index4].verticalSpeed = Convert.ToInt32(verticalSpeed);
                            break;
                        case 5:
                            //Surveillance altitude
                            int index5 = Convert.ToInt32(icaoHex, 16);
                            if (aircraftList[index5] == null)
                            {
                                aircraftList[index5] = new Aircraft();
                            }

                            aircraftList[index5].icaoID = icaoHex;
                            aircraftList[index5].altitude = Convert.ToInt32(altitude);
                            if (alertFlag == "1")
                            {
                                aircraftList[index5].alertFlag = true;
                            }
                            else
                            {
                                aircraftList[index5].alertFlag = false;
                            }
                            if (identFlag == "1")
                            {
                                aircraftList[index5].identFlag = true;
                            }
                            else
                            {
                                aircraftList[index5].identFlag = false;
                            }
                            break;
                        case 6:
                            //Surveillance ID (This means the aircraft is being hit with a ground RADAR)
                            int index6 = Convert.ToInt32(icaoHex, 16);
                            if (aircraftList[index6] == null)
                            {
                                aircraftList[index6] = new Aircraft();
                            }

                            aircraftList[index6].icaoID = icaoHex;
                            aircraftList[index6].altitude = Convert.ToInt32(altitude);
                            aircraftList[index6].sqwawkCode = sqwawkCode;
                            if (alertFlag == "1")
                            {
                                aircraftList[index6].alertFlag = true;
                            }
                            else
                            {
                                aircraftList[index6].alertFlag = false;
                            }
                            if (emergencyFlag == "1")
                            {
                                aircraftList[index6].emergencyFlag = true;
                            }
                            else
                            {
                                aircraftList[index6].emergencyFlag = false;
                            }
                            if (identFlag == "1")
                            {
                                aircraftList[index6].identFlag = true;
                            }
                            else
                            {
                                aircraftList[index6].identFlag = false;
                            }
                            break;
                        case 7:
                            //Air to Air
                            int index7 = Convert.ToInt32(icaoHex, 16);
                            if (aircraftList[index7] == null)
                            {
                                aircraftList[index7] = new Aircraft();
                            }

                            aircraftList[index7].icaoID = icaoHex;
                            aircraftList[index7].altitude = Convert.ToInt32(altitude);
                            break;
                        case 8:
                            //All Call
                            int index8 = Convert.ToInt32(icaoHex, 16);
                            if (aircraftList[index8] == null)
                            {
                                aircraftList[index8] = new Aircraft();
                            }

                            aircraftList[index8].icaoID = icaoHex;
                            break;
                        default:
                            //Bad header... immediately terminate parsing operation
                            return;
                    }
                    break;
                case "ID":  //Callsign Change
                    //Update callsign in list
                    break;
                case "AIR": //New Aircraft
                    //Add to list
                    int index = Convert.ToInt32(icaoHex, 16); //We will use the decimal form of the hex as the index.
                    if (aircraftList[index] == null)
                    {
                        aircraftList[index] = new Aircraft();
                    }
                    aircraftList[index].icaoID = icaoHex;
                    break;
                case "STA": //Aircraft Status Change
                    switch (callsign) //The callsign varaible will hold the subtype (not the callsign in this case)
                    {
                        case "PL":
                            //Stop displaying (coast)
                            break;
                        case "SL":
                            //Stop displaying (coast)
                            break;
                        case "RM":
                            //Stop displaying (coast)
                            break;
                        case "AD":
                            //Remove from list
                            int indexRemove = Convert.ToInt32(icaoHex, 16); //We will use the decimal form of the hex as the index.
                            if (aircraftList[indexRemove] == null)
                            {
                                aircraftList[indexRemove] = new Aircraft();
                            }
                            aircraftList[indexRemove].displayOnScope = false; //Make sure its not on the scope
                            aircraftList[indexRemove].callsign = "";
                            aircraftList[indexRemove].altitude = 0;
                            aircraftList[indexRemove].groundSpeed = 0;
                            aircraftList[indexRemove].latitude = 0.0;
                            aircraftList[indexRemove].longitude = 0.0;
                            aircraftList[indexRemove].sqwawkCode = "";
                            aircraftList[indexRemove].verticalSpeed = 0;
                            aircraftList[indexRemove].alertFlag = false;
                            aircraftList[indexRemove].emergencyFlag = false;
                            aircraftList[indexRemove].identFlag = false;
                            aircraftList[indexRemove].onGroundFlag = false;
                            //Resets all values to defaults
                            break;
                        case "OK":
                            //Sort of a 'keep alive'- ignore
                            break;
                    }
                    break;
            }
        }

        private static void AddToString(int counter, char a)
        {
            switch (counter) //Figure out which part we are referring to
            {
                case 0:
                    //Message type
                    msgType += a;
                    break;
                case 1:
                    //Subtype
                    msgSubt += a;
                    break;
                case 2:
                    //SessionID
                    sessionID += a;
                    break;
                case 3:
                    //AircraftID
                    aircraftID += a;
                    break;
                case 4:
                    //ICAO mode S code
                    icaoHex += a;
                    break;
                case 5:
                    //Flight ID (NOT callsign)
                    flightID += a;
                    break;
                case 6:
                    //Date generated
                    dateGenerated += a;
                    break;
                case 7:
                    //Time generated
                    timeGenerated += a;
                    break;
                case 8:
                    //Date logged
                    dateLogged += a;
                    break;
                case 9:
                    //Time logged
                    timeLogged += a;
                    break;
                case 10:
                    //Callsign
                    callsign += a;
                    break;
                case 11:
                    //Altitude
                    altitude += a;
                    break;
                case 12:
                    //Groundspeed
                    groundSpeed += a;
                    break;
                case 13:
                    //Track
                    track += a;
                    break;
                case 14:
                    //Latitude
                    latitude += a;
                    break;
                case 15:
                    //Longitude
                    longitude += a;
                    break;
                case 16:
                    //VerticalSpeed
                    verticalSpeed += a;
                    break;
                case 17:
                    //Squawk code
                    sqwawkCode += a;
                    break;
                case 18:
                    //Alert
                    alertFlag += a;
                    break;
                case 19:
                    //Emergency
                    emergencyFlag += a;
                    break;
                case 20:
                    //Ident
                    identFlag += a;
                    break;
                case 21:
                    //On Ground
                    onGround += a;
                    break;
            }
        }

        ///<summary>Clears variables neccesary for parsing ADS-B data.</summary>
        ///
        public static void ClearVars()
        {
            msgType = "";
            msgSubt = "";
            sessionID = "";
            aircraftID = "";
            icaoHex = "";
            flightID = "";
            dateGenerated = "";
            timeGenerated = "";
            dateLogged = "";
            timeLogged = "";
            callsign = "";
            altitude = "";
            groundSpeed = "";
            track = "";
            latitude = "";
            longitude = "";
            verticalSpeed = "";
            sqwawkCode = "";
            alertFlag = "";
            emergencyFlag = "";
            identFlag = "";
            onGround = "";
        }

        ///<summary>Closes the TCP connection to an ADS-B data source ***CALL BEFORE CLOSING PROGRAM***</summary>
        ///

        public static bool Close()
        {
            try
            {
                tcpListener.Close();
            }catch(Exception e)
            {
                return false;
            }
            return true;
        }
    }
}
